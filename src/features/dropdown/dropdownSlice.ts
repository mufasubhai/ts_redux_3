import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'



import type { AppState, AppThunk } from '../../app/store'
import { fetchCount } from './dropdownAPI'

export interface DropdownState {
  dateValues: Array<String>,
  departmentValues: Array<String>
}

export type DropdownItem = {
  type: String,
  val: String
}

const initialState: DropdownState = {
  dateValues: [],
  departmentValues: [],
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)

export const dropdownSlice = createSlice({
  name: 'dropdownSelection',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    toggleSelection: (state, action: PayloadAction<DropdownItem>) => {

      console.log(action)
      // setting up reducer to handle both date and dept type values.
      let targetValues: Array<String> | undefined

      if (action.payload.type === "department") {
        targetValues = state.departmentValues;
      } else if (action.payload.type === "date") {
        targetValues = state.dateValues;
      } else {
        targetValues = []
      }


      if (targetValues.includes(action.payload.val)) {
        targetValues = targetValues.filter(el => el != action.payload.val)
 
      } else {
        targetValues.push(action.payload.val)
      }


      if (action.payload.type === "department") {
        state.departmentValues = targetValues
      } else if (action.payload.type === "date") {
        state.dateValues = targetValues
      }



      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.value += 1
    },
    // decrement: (state) => {
    //   state.value -= 1
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading'
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle'
  //       state.value += action.payload
  //     })
  // },
})

export const { toggleSelection} = dropdownSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of


// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: AppState) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState())
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount))
//     }
//   }

export default dropdownSlice.reducer
